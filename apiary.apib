FORMAT: 1A
HOST: http://www.api2.freshrealm.co

# Freshrealm REST API 2.0 Documentation

This document describes the calls needed to FreshRealm’s API operations.

# Output Format and Structure
The REST API supports the response to be in JSON format. The response has the following structure:

    {
        "code": 200,
        "timestamp": 1367975121,
        "data": {
            “id”: 5,
            ...,
            ...,
            ...
        }
    }


`Code` is one of the following standard HTTP status codes:

1.  `200` OK
2.  `400` Bad Request
3.  `401` Access Denied
4.  `403` Token key is not valid
5.  `404` Resource Not Found
6.  `500` Internal Server Error
7.  `501` Not Implemented

`Timestamp` is UNIX timestamp of the request in UTC format.

`Data` contains attributes of a single resource or array of resources.

# Service Endpoints
An endpoint provides the URL of the server that handles your request.  The API endpoint for all requests in this document is http://api2.freshrealm.co/

# Example
In the case where you want to retrieve recent order information, you would use the GET HTTP method.

`http://api2.freshrealm.co/orders?key=myaccesstoken`

A `key` is a required attribute for each call. See the authentication diagram at the bottom of this document for more information.

# Requesting Specific Fields
For performance reasons, FreshRealm recommends retrieving the minimum number of fields. In addition, not all fields are retrieved by default, so additional fields may be requested (details of the attributes of the resources are described in the Resource Description section).  To retrieve fewer (or more) fields, use the `fields` attribute in the GET request.

`http://api2.freshrealm.co/orders?fields=[‘totalPrice’]`

To obtain multiple fields, separate the fields by commas:

`http://api2.freshrealm.co/products/1918?fields=["id","costs","prices”]`

Some calls retrieve nested arrays.  When this is the case you must use the key of the array to retrieve a subset of the fields.  For example to retrieve customer information for order 678 (e.g. email, phone...) you could use this call:

`http://api2.freshrealm.co/orders/678?fields=[‘customer’]`

# Limit and Offset
Retrieving a large list of resources in one request will degrade performance. Use `limit` and `offset` GET attributes to divide you request into multiple queries. The default value for `limit` is 100.  The default ordering for the orders output is most recent first, and this level of detail is provided in the documentation for specific operations.  For example, if we want to get the next 50 orders starting from position 150 (150th most recent order).

`http://api2.freshrealm.co/orders?offset=150&limit=50`

# Filter
Some fields can be used for filtering a list of resources. Filter is a JSON encoded GET attribute that can be defined by a key value pair or as a JSON object with an operator.

### Allowed Operators
`in`, `not in`, `like`, `=`, `<`, `>`, `<=`, `>=`, `!=`

#### Ex: Find customer by email
`http://api2.freshrealm.co/customers?filter={‘email’:‘mycustomer@freshrealm.co’}`

#### Ex: List all orders with a total price higher than $50
`http://api2.freshrealm.co/orders?filter=[{‘field’:’totalPrice,’operator’:’>’,’value’:’50’}]`

### Timestamp Filter
This filter allows retrieval of only records created or modified after this time. For example, it can be used for database synchronization of products between FreshRealm and your shopping cart application. Every request returns a timestamp, which can be used for this filter.

`http://api2.freshrealm.co/orders?timestamp=1367975121`

# Object - Identifier - Object Pattern
The FreshRealm RESTful API uses best practices including the object, identifier, object pattern.  For example, to get the orders from customer 4412, you would use this operation:

`http://api2.freshrealm.co/customers/4412/orders/`

# Contributing
This API documentation lives on Github. If you see an error or a typo, please submit a pull request at [https://github.com/trooprr/freshrealm-api](https://github.com/trooprr/freshrealm-api). We're always happy to have contributions.

# Group Authentication
FreshRealm’s REST API currently uses a proprietary authentication system. Each client server gets its own API access key, which is a part of every request sent to the FreshRealm API.  You must obtain this key by using our authentication call and supplying your "secret code" that we will send to you to begin testing.  At the end of this document a brief diagram is provided to explain our initial authentication system.

##Get Authentication Token [/authenticate]
### POST
+ Request (application/json)
Your FreshRealm secret must be obtained by contacting FreshRealm.

    + Body

        {
            "secret": "myFreshRealmSecret"
        }

+ Response 200 (application/json)

    {
        "code": 200,
        "timestamp": 1465982944,
        "data": {
            "token": "myNewToken"
        }
    }


# Group Products

A **product** is an active item available to your customer.

The following table describes which attributes are provided by default, and which can be used as a filter.


| Field                 | Default   | Filter    | Description |
|-----------------------|-----------|-----------|-------------|
| `id`                    | X         | X         | FreshRealm item id |
| `sku`                   | X         | X         | Retailer defined item SKU |
| `gtin`                  |           | X         | Global gtin identification number |
| `published`             | X         | X         | Prepare your shopping cart before publishing the product. Customers should see only published products |
| `description`           |           | X         |  |
| `weight`                | X         | X         | Item’s weight |
| `weightUnit`            | X         | X         | Unit of weight used e.g. lb, oz etc |
| `width`                 | X         | X         | In inches |
| `height`                | X         | X         | In inches |
| `length`                | X         | X         | In inches |
| `minFreshrealmCost`     | X         | X         | Minimum FreshRealm Cost |
| `avgFreshrealmCost`     | X         | X         | Average FreshRealm Cost |
| `maxFreshrealmCost`     | X         | X         | Maximum FreshRealm Cost |
| `name`                  | X         |           | Name of the product - can be customized |
| `url`                   |           |           | URL resource |
| `categories`            |           |           | List of categories |
| `costs`                 |           |           | Product cost |
| `prices`                |           |           | Product Prices |
| `ingredients`           |           |           | ingredients of the products |
| `nutrition`             | X         |           | Nutritional information for a product. Included by default if individual product is requested but not when list of products is requested |
| `imageURL`              |           |           | Default image url in the full resolution |
| `images`                |           |           | Array of product images. Each image has ‘default’, ‘large’(1024x768), ‘medium’(800x600) and ‘small’(160x120) keys pointing to the image url |
| `price`                 |           |           | Zipcode dependent price function. Zipcode must be provided in order to obtain the result |
| `cost`                  |           |           | Zipcode dependent cost function. Zipcode must be provided in order to obtain the result |
| `margin`                |           |           | Zipcode dependent margin function. Zipcode must be provided in order to obtain the result |


## List Products [/products?key={token}]
Return all of the products. This operation can be used for testing purposes and also to get the `id`s of products that you can submit in the `Place Order` operation. See the `Products` resource table for more information.

### GET

+ Parameters
    + token (required, string)

+ Response 200 (application/json)

                {
                    "code": 200,
                    "timestamp": 1402706999,
                    "data": [{
                        "id": "2158",
                        "sku": "XDDWW3",
                        "published": "1",
                        "weight": "0.400",
                        "weightUnit": "lb",
                        "width": "5.000",
                        "height": "1.000",
                        "length": "5.000",
                        "minFreshrealmCost": "2.1",
                        "avgFreshrealmCost": "2.3",
                        "maxFreshrealmCost": "2.5",
                        "name": "Item 1"
                    },{
                        "id": "2159",
                        "sku": "XDDWW3",
                        "published": "1",
                        "weight": "0.400",
                        "weightUnit": "lb",
                        "width": "5.000",
                        "height": "1.000",
                        "length": "5.000",
                        "minFreshrealmCost": "2.1",
                        "avgFreshrealmCost": "2.3",
                        "maxFreshrealmCost": "2.5",
                        "name": "Item 2"
                    }]
                }


## Get A Product [/products/{id}?key={token}]
Fetch a product by its `id`.

### GET

+ Parameters
    + id (required, number, 1)
    + token (required, string)

+ Response 200 (application/json)

                {
                    "code": 200,
                    "timestamp": 184653225,
                    "data": {
                        "id": "2158",
                        "sku": "XDDWW3",
                        "published": "1",
                        "weight": "0.400",
                        "weightUnit": "lb",
                        "width": "5.000",
                        "height": "1.000",
                        "length": "5.000",
                        "minFreshrealmCost": "2.1",
                        "avgFreshrealmCost": "2.3",
                        "maxFreshrealmCost": "2.5",
                        "nutrition": {
                            "calories": {
                                "amount": "193.75",
                                "unit": "KCal"
                            },
                            "Fat": {
                                "amount": "0",
                                "unit": "g"
                            },
                            "Saturated Fat": {
                                "amount": "0.05",
                                "unit": "g"
                            },

                            "Cholesterol": {
                                "amount": "5",
                                "unit": "mg"
                            },
                            "Carbohydrates": {
                                "amount": "44.43",
                                "unit": "g"
                            },
                            "Fiber": {
                                "amount": "4.42",
                                "unit": "g"
                            },
                            "Sugar": {
                                "amount": "32.13",
                                "unit": "g"
                            },
                            "Protein": {
                                "amount": "10.47",
                                "unit": "g"
                            }
                        }
                    }
                }



## Retrieve ID, Costs, Prices [/products/productId?key={token}&fields={fieldsList1}]
This example shows how to limit the returned data to a specific set of fields.

### GET
+ Parameters
    + token (required, string)
    + fieldsList1 (optional, array, `["id","costs","prices"]`)

+ Response 200 (application/json)

            {
                "code": 200,
                "timestamp": 1402706999,
                "data": {
                    "costs": {
                        "avg": "5.23",
                        "min": "4.55",
                        "max": "6.03"
                    },

                    "prices": {
                        "avg": "5.53",
                        "min": "4.96",
                        "max" : "6.76"
                    }
                }
            }

## Retrieve Image Details [/products/productId?key={token}&fields={fieldsList2}]
This example shows how to receive only image related fields. Refer to the table above to see which fields are available.

### GET

+ Parameters
    + token (required, string)
    + fieldsList2 (optional, array, `["id","imageUrl","url","images"]`)

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1402706999,
            "data": {
                "id": "2192",
                "url": "api2./products/2192?key=pXUMjWnDRmx5bAIDn8L8NecTGWKcAsa",
                "imageUrl": "http://images.freshrealm.co/upload/838cf1a6-4f5f-4f75-bca6-f11db34d9fd1.jpg",
                "images": {
                    "default":"http://images.freshrealm.co/upload/838cf1a6-4f5f-4f75-bca6-f11db34d9fd1.jpg",
                    "large":"http://src1.sencha.io/1024/768/http://images.freshrealm.co/upload/838cf1a6-4f5f-4f75-bca6-f11db34d9fd1.jpg",
                    "medium":"http://src4.sencha.io/800/600/http://images.freshrealm.co/upload/838cf1a6-4f5f-4f75-bca6-f11db34d9fd1.jpg",
                    "small":"http://src2.sencha.io/160/120/http://images.freshrealm.co/upload/838cf1a6-4f5f-4f75-bca6-f11db34d9fd1.jpg"
                }
            }
        }

## Retrieve ID, Margin [/products/productId?key={token}&fields={fieldsList3}]
Another filtering example.

### GET
+ Parameters
    + token (required, string)
    + fieldsList3 (optional, array, `["id","margin"]`)


+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1402706999,
            "data": {
                "id": "2188",
                "margin": {
                    "type": "default",
                    "value": "15.00",
                    "unit": "percents"
                }
            }
        }


## Filter Example [/products?key={token}&filter={filter}]
Some fields can be used for filtering a list of resources. `Filter` is a JSON encoded GET attribute that can be defined by a key value pair or as a JSON object with an operator.

### GET
+ Parameters
    + token (required, string)
    + filter (optional, array, `[{"field":"gtin", "value":"test_fixture_item_16", "operator:"like"}]`)


+ Response 200 (application/json)


        {
            "code": 200,
            "timestamp": 1402706999,
            "data": [{
                "id": "2158",
                "sku": "XDDWW3",
                "published": "1",
                "weight": "0.400",
                "weightUnit": "lb",
                "width": "5.000",
                "height": "1.000",
                "length": "5.000",
                "minFreshrealmCost": "2.1",
                "avgFreshrealmCost": "2.3",
                "maxFreshrealmCost": "2.5",
                "name": "Item 16"
            }]
        }

## Limit and Offset Example [/products?key={token}&limit={limit}&offset={offset}]
Retrieving a large list of resources in one request will degrade performance. Use `limit` and `offset` GET attributes to divide your request into multiple queries. The default value for limit is 100.

### GET

+ Parameters
    + token (required, string)
    + limit (optional, number, 2)
    + offset (optional, number, 1)

+ Response 200 (application/json)


        {
            "code": 200,
            "timestamp": 1402706999,
            "data": [{
                "id": "2158",
                "sku": "XDDWW3",
                "published": "1",
                "weight": "0.400",
                "weightUnit": "lb",
                "width": "5.000",
                "height": "1.000",
                "length": "5.000",
                "minFreshrealmCost": "2.1",
                "avgFreshrealmCost": "2.3",
                "maxFreshrealmCost": "2.5",
                "name": "Item 1"
            },{
                "id": "2159",
                "sku": "XDDWW4",
                "published": "1",
                "weight": "0.400",
                "weightUnit": "lb",
                "width": "5.000",
                "height": "1.000",
                "length": "5.000",
                "minFreshrealmCost": "2.1",
                "avgFreshrealmCost": "2.3",
                "maxFreshrealmCost": "2.5",
                "name": "Item 2"
            }]
        }

## Price By Zipcode [/products/{id}?key={token}&zip={zipcode}&fields={fieldsList}]
Get the price of a product for a given zipcode.

### GET
+ Parameters
    + token (required, string)
    + id (required, number)
    + zipcode (required, string, `95660`)
    + fieldsList (optional, array, `["id", "name", "price"]`)

+ Response 200 (application/json)

        {
            "code": "200",
            "timestamp": "1376939257",
            "data": {
                "id": "2189",
                "name": "Item 2",
                "price": "2.34"
            }
        }


## Get Ingredients [/products/{id}?key={token}&fields={fieldsList}]

### Obtain a list of ingredents [GET]
+ Parameters
    + token (required, string)
    + id (required, number)
    + fieldsList (optional, array, `["id", "ingedients"]`)


+ Response 200 (application/json)

        {
            "code": "200",
            "timestamp": "1376939257",
            "data": {
                "id":"2203",
                "ingredients": [{
                    "url":"api2.freshrealm.co/items/2201?key=FgDqgXUUP7dh38zb2CSCmcyookXnTgM",
                    "id":"2201",
                    "amount":"0.5",
                    "unit":"ft"
                }]
            }
        }

## Get Categories [/products/{id}/categories?key={token}]
Get the categories to which a particular product belongs.

### GET
+ Parameters
    + token (required, string)
    + id (required, number, `1`)

+ Response 200 (application/json)

        {
            "code": "200",
            "timestamp": "1376939257",
            "data": [{
                "id":"283",
                "name":"Category 1",
                "url":"api2.freshrealm.co/categories/283?key=DwnQZEAZZQCWrVT0UVdJg9WxEZq29S9"
            },{
                "id":"284",
                "name":"Category 2",
                "url":"api2.freshrealm.co/categories/284?key=DwnQZEAZZQCWrVT0UVdJg9WxEZq29S9"
            }]
        }

## Nutritional Information [/products/{id}?key={token}&fields={fieldsList}]
Retrieve the nutritional information for a specific product.

### GET

+ Parameters
    + token (required, string)
    + id (required, number)
    + fieldsList (optional, array, `["id","gtin","nutrition","ingredients"]`)

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": "1376939257",
            "data": {
                "id": "2188",
                "gtin": "test_fixture_item_1",
                "ingredients": [{
                    "url": "api2.freshrealm.co/items/2191?key=4Zv7kxBPIhZeiXCs67386muvMc27tVJ",
                    "id": "2191",
                    "amount": "20",
                    "unit": "lb"
                },{
                    "url": "api2.freshrealm.co/items/2192?key=4Zv7kxBPIhZeiXCs67386muvMc27tVJ",
                    "id": "2192",
                    "amount": "20",
                    "unit": "lb"
                },{
                    "url": "api2.freshrealm.co/items/2201?key=4Zv7kxBPIhZeiXCs67386muvMc27tVJ",
                    "id": "2201",
                    "amount": "0.5",
                    "unit": "ft"
                },{
                    "url": "api2.freshrealm.co/items/2204?key=4Zv7kxBPIhZeiXCs67386muvMc27tVJ",
                    "id": "2204",
                    "amount": "1",
                    "unit": "ft"
                }],
                "nutrition": {
                    "calories": {
                        "amount": "193.75",
                        "unit": "KCal"
                    },
                    "Fat": {
                        "amount": "0",
                        "unit": "g"
                    },
                    "Saturated Fat": {
                        "amount": "0.05",
                        "unit": "g"
                    },
                    "Cholesterol": {
                        "amount": "5",
                        "unit": "mg"
                    },
                    "Carbohydrates": {
                        "amount": "44.43",
                        "unit": "g"
                    },
                    "Fiber": {
                        "amount": "4.42",
                        "unit": "g"
                    },
                    "Sugar": {
                        "amount": "32.13",
                        "unit": "g"
                    },
                    "Protein": {
                        "amount": "10.47",
                        "unit": "g"
                    }
                }
            }
        }

# Group Orders

## Place An Order [/orders]
To create an order, you must pass either a `customerId` or a `customer` JSON object (see `Customer`).
If neither is provided, an error will be thrown. If both are provided, `customerId` takes precedence
over customer array. If no customer id is provided, the FreshRealm API looks up the customer by
email address and phone number. New customers are created on the fly.

### Attributes
| field          | required | type      | example                               | description |
|-----------------------|:-:|-----------|---------------------------------------|-------------|
| customerId            |   | int       | `1`                                   | Customer Id |
| customer              |   | object    | `{...}`                               | Customer object, see `Customer`. |
| shoppingCart          | * | array     | `[...]`                               | See below |
| totalPrice            |   | string    | `20.98` | Optional. Needed for FreshRealm to provide invoice in shipping container |
| salesTax              |   | string    | `0.00` | Optional. Needed for FreshRealm to provide invoice in shipping container |
| totalShipping         |   | string    | `5.00` | Optional. Needed for FreshRealm to provide invoice in shipping container |
| deliveryDate          |   | string    | `06-28-2014` | Optional for orders not on the earliest delivery date |
| specialInstructions   |   | string    |  | Optional |

#### Shopping Cart Attributes
| field | required  | type      | example                           | description |
|---------------|:-:|-----------|-----------------------------------|-------------|
| sku           | * | string    | `111111`                          | Product SKU |
| itemId        | * | int       | `1`                               | FreshRealm Item ID |
| qty           | * | int       | `1`                               | Quantity |
| itemPrice     |   | string    | `9.99`                            | Optional. Item Price |

**Note**: either `itemId` or `sku` must be provided. If both are provided, we first search for the item by `itemId`.

### Place An Order [POST]

+ Request (application/json)

    + Body

            {
                 "customerId": 1,
                 "customer": {
                    "firstName": "Aaron",
                    "lastName": "Francis",
                    "email": "aarondfrancis@gmail.com",
                    "phone": "555-555-5555",
                    "addressFields": {
                        "streetAndNumber": "4431 Meadow Ln",
                        "aptSuite": "",
                        "city": "Anytown",
                        "state": "TX",
                        "zipcode": "75321"
                    }
                },
                "shoppingCart": [{
                    "sku": "111111",
                    "itemId": "1",
                    "qty": 1,
                    "itemPrice": "9.99"
                },{
                    "sku": "222222",
                    "itemId": "2",
                    "qty": 1,
                    "itemPrice": "5.99"
                }],
                "totalPrice": "20.98",
                "salesTax": "0",
                "totalShipping": "5.00",
                "deliveryDate": "06-14-2014",
                "specialInstructions": ""
            }

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1402706999
            "data": {
                "id": "109",
                "succeeded": "1",
                "message": "Succeeded!",
                "subTotal": "50.43",
                "shippingAndHandling": "15.00",
                "salesTax": "ul",
                "total": "65.43",
                "shippingAddressId": "415",
                "paymentMethodToken": "Kstpsl0EJ5iDvBg3IY3jnC6yTwB",
                "deliveryDate": "2014-06-17",
                "complete": "0",
                "productLines": [{
                    "name": "Product 1",
                    "id": "1",
                    "description": "",
                    "quantity": 1,
                    "price": "9.99"
                },{
                    "name": "Product 2",
                    "id": "2",
                    "description": "",
                    "quantity": 1,
                    "price": "5.99"
                }],
                "customerId": "1",
                "externalId": null,
                "createTime": 1402706948,
                "updateTime": 1402706998,
                "confirmationUri": null,
                "redirectUri": null,
                "authorizationToken": 'JCejaDc2awjFbMsCGMbLRlwu5qO',
                "authorizeTime": '2014-06-14 00:49:58',
                "transactionTime": null,
            }
        }

## Get All Orders [/orders?key={token}&limit={limit}]

Retrieve all the latest orders (default limit is 100 results)

### Get All Orders [GET]
+ Parameters
    + token (required, string)
    + limit (optional, number, `5`)

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1377021331
            "data": [{
                "id": "576",
                "customerId": "228",
                "status": "PENDING",
                "totalCost": "72.140",
                "shippingAndHandling": "45.640",
                "specialInstructions": "",
                "codropId": "",
                "createTime": "2013-08-20 17:47:37",
                "updateTime": "2013-08-20 17:47:37",
                "deliveryDate": "2013-08-22",
                "orderNumber": "",
                "trackingInfo": {
                    "carrier":" ",
                    "trackingNumThere":" "
                },
                "shippingAddress": {
                    "streetAndNumber": "200 E Main St",
                    "aptSuite": "",
                    "city": "Ventura",
                    "state": "CA",
                    "zipcode": "93001"
                },
                "customer": {
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "phone": "8051234567",
                    "email": "numberonebob@bob.com",
                    "customerNumber":" "
                }
            }, {
                "id": "576",
                "customerId": "228",
                "status": "PENDING",
                "totalCost": "72.140",
                "shippingAndHandling": "45.640",
                "specialInstructions": "",
                "codropId": "",
                "createTime": "2013-08-20 17:47:37",
                "updateTime": "2013-08-20 17:47:37",
                "deliveryDate": "2013-08-22",
                "orderNumber": "",
                "trackingInfo": {
                    "carrier":" ",
                    "trackingNumThere":" "
                },
                "shippingAddress": {
                    "streetAndNumber": "200 E Main St",
                    "aptSuite": "",
                    "city": "Ventura",
                    "state": "CA",
                    "zipcode": "93001"
                },
                "customer": {
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "phone": "8051234567",
                    "email": "numberonebob@bob.com",
                    "customerNumber":" "
                }
            }]
        }

## Get Orders By Customer [/customers/{customerId}/orders?key={token}&limit={limit}]
Retrieve all the latest orders for a given `Customer ID` (default limit is 100 results)

### GET
+ Parameters
    + customerId (required, number, `1001`)
    + token (required, string)
    + limit (optional, number, `5`)

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1377021331
            "data": [{
                "id": "576",
                "customerId": "228",
                "status": "PENDING",
                "totalCost": "72.140",
                "shippingAndHandling": "45.640",
                "specialInstructions": "",
                "codropId": "",
                "createTime": "2013-08-20 17:47:37",
                "updateTime": "2013-08-20 17:47:37",
                "deliveryDate": "2013-08-22",
                "orderNumber": "",
                "trackingInfo": {
                    "carrier":" ",
                    "trackingNumThere":" "
                },
                "shippingAddress": {
                    "streetAndNumber": "200 E Main St",
                    "aptSuite": "",
                    "city": "Ventura",
                    "state": "CA",
                    "zipcode": "93001"
                },
                "customer": {
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "phone": "8051234567",
                    "email": "numberonebob@bob.com",
                    "customerNumber":" "
                }
            }, {
                "id": "576",
                "customerId": "228",
                "status": "PENDING",
                "totalCost": "72.140",
                "shippingAndHandling": "45.640",
                "specialInstructions": "",
                "codropId": "",
                "createTime": "2013-08-20 17:47:37",
                "updateTime": "2013-08-20 17:47:37",
                "deliveryDate": "2013-08-22",
                "orderNumber": "",
                "trackingInfo": {
                    "carrier":" ",
                    "trackingNumThere":" "
                },
                "shippingAddress": {
                    "streetAndNumber": "200 E Main St",
                    "aptSuite": "",
                    "city": "Ventura",
                    "state": "CA",
                    "zipcode": "93001"
                },
                "customer": {
                    "firstName": "Bob",
                    "lastName": "Smith",
                    "phone": "8051234567",
                    "email": "numberonebob@bob.com",
                    "customerNumber":" "
                }
            }]
        }


## Get Order Details [/order/{orderId}?key={token}]
Get the details of a particular order, given an `orderId`.
### GET
+ Parameters
    + orderId (required, number, `109`)
    + token (required, string)

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1402706999
            "data": {
                "id": "109",
                "succeeded": "1",
                "message": "Succeeded!",
                "subTotal": "50.43",
                "shippingAndHandling": "15.00",
                "salesTax": "ul",
                "total": "65.43",
                "shippingAddressId": "415",
                "paymentMethodToken": "Kstpsl0EJ5iDvBg3IY3jnC6yTwB",
                "deliveryDate": "2014-06-17",
                "complete": "0",
                "productLines": [{
                    "name": "Product 1",
                    "id": "1",
                    "description": "",
                    "quantity": 1,
                    "price": "9.99"
                },{
                    "name": "Product 2",
                    "id": "2",
                    "description": "",
                    "quantity": 1,
                    "price": "5.99"
                }],
                "customerId": "1",
                "externalId": null,
                "createTime": 1402706948,
                "updateTime": 1402706998,
                "confirmationUri": null,
                "redirectUri": null,
                "authorizationToken": 'JCejaDc2awjFbMsCGMbLRlwu5qO',
                "authorizeTime": '2014-06-14 00:49:58',
                "transactionTime": null,
            }
        }

## Cancel an Order [/cancelOrder/{orderId}?key={token}]

This call allows you to cancel existing orders that have not been started yet. An order can be cancelled any time before the food is being made (while order status is `PENDING`).

### Cancel An Order [PUT]

+ Parameters
    + orderId (required, number, `109`)
    + token (required, string)


+ Request (application/json)
The input `id` must match the `orderId` in the URL.

    + Body

        {
            "id": 109
        }

+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1377020859,
            "data": {
                "id":109,
                "status": "CANCELLED"
            }
        }


# Group Customers

This operation can be used to find a customer and to get all the orders for the customer.

|Field                      |Default        |Filter                 |Description |
|---------------------------|---------------|-----------------------|------------|
|id                         |X              |X                      |FreshRealm customer id |
|firstName                  |X              |X                      |First name of customer |
|lastName                   |X              |X                      |Last name of customer |
|email                      |X              |X                      |Email Address |
|phone                      |X              |X                      |Phone Number |
|addresses                  |X              |X                      |List of the latest shipping addresses |
|customerID                 |X              |X                      |The external customer id (customer id set by customers of FreshRealm) |


## List of orders placed by the customer [/customers/{customerId}?key={token}]

### GET

+ Parameters
    + token (required, string)
    + customerId (required, number)


+ Response 200 (application/json)

        {
            "code": 200,
            "timestamp": 1377020859,
            "data": {
                "id": "228",
                "firstName": "Bob",
                "lastName": "Smith",
                "email": "numberonebob@bob.com",
                "phone": "8051234567",
                "customerId": ""
            }
        }


#Group Addresses

This operation can be used to find addresses and get all the addresses for a customer.

|Field              |Description        |
|-------------------|-------------------|
|streetAndNumber    |Example: 476 Main St       |
|aptSuite           |Apartment number, unit number or suite. Example: Unit A        |
|city               |City name      |
|state              |State name - Example: CA or California     |
|verify             |Set to `1` to run validation against address database. This extra validation can catch incorrect zipcode or house number. Use this feature to make sure that the package will be delivered to the right address. |

# Group Categories

This operation can be used to find available categories to which products belong.  See the ‘Categories’  resource table for more information.

HTTP Method: GET
Url: http://api2.freshrealm.co/categories?key=myaccesstoken

<TABLE>

<TR VALIGN=TOP>
<TD>Field</TD>
<TD>Default</TD>
<TD>Filter</TD>
<TD>Description</TD>
</TR>

<TR VALIGN=TOP>
<TD>id</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Category id</TD>
</TR>

<TR VALIGN=TOP>
<TD>parentId</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Id of a parent category if category is a subcategory of another category</TD>
</TR>

<TR VALIGN=TOP>
<TD>name</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Category name</TD>

<TR VALIGN=TOP>
<TD>published</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Whether a category is activated or not</TD>

</TR>
<TR VALIGN=TOP>
<TD>imageUrl</TD>
<TD><BR></TD>
<TD><BR></TD>
<TD>Returns urls of images that are attached to category (optional)</TD>
</TR>

<TR VALIGN=TOP>
<TD>parentUrl</TD>
<TD><BR></TD>
<TD><BR></TD>
<TD>Url of a parent category if such category exists</TD>
</TR>

</TABLE>

### Get Categories
This call uses GET method.

##Retrieve individual category[/categories?key={token}]
###Retrieve individual category [GET]

+ Response 200 (application/json)

            {
            "code": 200,
            "timestamp": 1402706999
            "data":[
               {
                  "id":"293",
                  "name":"Category 1"
               },
               {
                  "id":"294",
                  "name":"Category 2"
               },
               {
                  "id":"295",
                  "name":"Category 3"
               }
            ]}

##Retrieve individual category[/categories/categoryId?key={token}]
###Retrieve individual category [GET]

+ Response 200 (application/json)

            {
               "id":"293",
               "parentId":"",
               "name":"Category 1",
               "published":"1"
            }


#Group Transactions
Use Case Scenario:
This operation can be used to retrieve a list of all the transactions.  Get transactions will give you the ids for those requested transaction to allow you to then get orders for them.  See the ‘transactions ‘  resource table for more information.

HTTP Method: GET
Url: http://api2.freshrealm.co/transactions?key=myaccesstoken

#Group Codrops
Use Case Scenario:
To obtain information about codrop, request individual codrop information, get list of customers belonging to a codrop, or create a codrop.

Codrops allow multiple customers to have food delivered to one location. Codrops can be public or private. Codrops could be open to all or by invite only. FreshRealm API allows retrieving information about all codrops or individual codrop, as well as creation of a new codrop.

See the ‘Codrops’ resource table for more information, as well as examples below.

HTTP Method Used: GET for getting information on codrop(s), POST to create a codrop
Url:http://api2.freshrealm.co/codrops?key=myaccesstoken

<TABLE>
<TR VALIGN=TOP>
<TD>Field</TD>
<TD>Default</TD>
<TD>Filter</TD>
<TD>Description</TD>
</TR>

<TR VALIGN=TOP>
<TD>id</TD>
<TD>X</TD>
<TD>X</TD>
<TD>FreshRealm codrop id</TD>
</TR>

<TR VALIGN=TOP>
<TD>name</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Codrop name</TD>
</TR>

<TR VALIGN=TOP>
<TD>address</TD>
<TD>X</TD>
<TD><BR></TD>
<TD>Address of a codrop</TD>
</TR>

<TR VALIGN=TOP>
<TD>facilitator</TD>
<TD><BR></TD>
<TD><BR></TD>
<TD>Information about codrop’s facilitator</TD>
</TR>

<TR VALIGN=TOP>
<TD>notes</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Notes</TD>
</TR>

<TR VALIGN=TOP>
<TD>active</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Flag whether codrop is active</TD>
</TR>

<TR VALIGN=TOP>
<TD>timestamp</TD>
<TD><BR></TD>
<TD>X</TD>
<TD>Latest timestamp when the codrop was updated</TD>
</TR>

<TR VALIGN=TOP>
<TD>inviteRequired</TD>
<TD><BR></TD>
<TD>X</TD>
<TD>Whether invite is required</TD>
</TR>

<TR VALIGN=TOP>
<TD>chargePerOrder</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Charge per order</TD>
</TR>

</TABLE>


## Retrieve all codrop information [/codrops?key={token}]
### Get all co-drops [GET]


+ Response 200 (application/json)

<<<<<<< HEAD

{
            "code": 200,
            "timestamp": 1402706999
            "data":
=======
>>>>>>> FETCH_HEAD
            {
                "code": 200,
                "timestamp": 1402706999
                "data": {
                    "id": "75",
                    "name": "TestDrop1",
                    "address": "110 North 13th Street, Las Vegas, NV, 89101",
                    "facilitator": {
                        "firstName": "Facilitator",
                        "lastNameUser":"",
                        "email": "test_facilitator1@freshrealm.co",
                        "phone": "9999999010"
                    }
                }
            }
}

## Get information about individual codrop [/codrops/codropId?key?{token}]
### Get information about individual codrop [GET]

+ Response 200 (application/json)

            {
            "code": 200,
            "timestamp": 1402706999
            "data":{
                            "id": "75",
                            "name": "TestDrop1",
                            "notes": "public drop",
                            "active": "1",
                            "timestamp": "2013-08-20 19:38:23"
                            "inviteRequired":
                            "public": "1",
                            "chargePerOrder": "0.00"
                    }
            }

## Create Co-drop [/codrops?key={token}]
### Create Co-drops [POST]

+ Request

        {
                "name":"API_TestCodrop",
                "inviteRequired":"",
                "active":"",
                "notes":"Test codrop created through API",
                "addressFields": {
                    "streetAndNumber":"500 Poli St",
                    "aptSuite":"A",
                    "city":"Ventura",
                    "state":"CA",
                    "zipcode":"93001"
                }
        }


+ Response 200 (application/json)


        {
            "id": "79"
            "name": "API_TestCodrop"
            "notes": "Test codrop created through API"
            "active": "",
            "timestamp": "2013-08-20 20:10:05"
            "inviteRequired": "",
            "public": "",
            "chargePerOrder": "0.00"
        }

## Get list of customers belonging to a particular codrops [/codrops/codropId/customrs?key={token}]
### Get list of customers belonging to a particular codrops [GET]

+ Parameters
    + token (required, string)

+ Response 200 (application/json)

            {
            "code": 200,
            "timestamp": 1402706999
            "data":[{
                          "id":"233",
                          "firstName":"Bob",
                          "lastName":"Smith",
                          "email":"numberonebob@bob.com",
                          "phone":"8051234567",
                          "address":"200 E Main St, Ventura, CA, 93001"
                   },{
                          "id":"234",
                          "firstName":"David",
                          "lastName":"Sobotka",
                          "email":"david@sobotka.com",
                          "phone":"8131234567",
                          "address":"3501 Interstate 275 Frontage Rd E, Tampa, FL, 33607"
                   }
            ]}

#Group Shipping

###Get Shipping Details
***Use Case Scenario:***
This operation is used at the checkout page to get the shipping cost and earliest delivery date based on the items and address that the food is being delivered to without placing the actual order.  Input and Output is the same as the ‘Place Order ‘call below.

<TABLE>

<TR VALIGN=TOP>
<TD>Field</TD>
<TD>Default</TD>
<TD>Filter</TD>
<TD>Description</TD>
</TR>

<TR VALIGN=TOP>
<TD>id</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Shipment id</TD>
</TR>

<TR VALIGN=TOP>
<TD>shipMethod</TD>
<TD>X</TD>
<TD>X</TD>
<TD>Indicates what postal carrier was used to ship the shipment. Possible values are ‘fedex’, ‘usps’, ‘ups’ etc.</TD>
</TR>

<TR VALIGN=TOP>
<TD>updateTime</TD>
<TD><BR></TD>
<TD>X</TD>
<TD>Latest timestamp when the shipment was updated</TD>

</TR>
<TR VALIGN=TOP>
<TD>shippingAddress</TD>
<TD>X</TD>
<TD><BR></TD>
<TD>Address resource where shipment was delivered (see Address resource above for more info)</TD>
</TR>

<TR VALIGN=TOP>
<TD>shipToName</TD>
<TD>X</TD>
<TD><BR></TD>
<TD>Name of shipment recipient</TD>
</TR>

</TR>
<TR VALIGN=TOP>
<TD>shippingLines</TD>
<TD>X</TD>
<TD><BR></TD>
<TD> Array of shipping lines. Every shipping line contains the following information:
+    productNumber (cartId-itemId, itemId, or “coolant”)
+    vesselNumber
+    customerName
+    slotNumber
+    vesselNotchNumber
+    unitPrice
+    labelInfo
+    vesselSize (‘Small’, ‘Medium’, ‘Large’)</TD>
</TR>

</TABLE>


##Download Shipments Information [/shipments?key={token}&timestamp={value}]

### Shipment Information [GET]
+ Parameters
    + Token (required, string)
    + Timestamp (value, optional)

+ Response 200 (application/json)


                {
                    "code": 200,
                    "timestamp": 1402706999
                    "data":{
                          "streetAndNumber": "200 E Main St",
                          "aptSuite": "",
                          "city": "Ventura",
                          "state": "CA",
                          "zipcode": "93001",
                          "country": "US",
                          "shipToName": "Bob Smith",
                          "shippingLines":"",
                          },{
                            "productNumber": "coolant",
                          "vesselNumber": "0",
                          "slotNumber": "0",
                          "vesselNotchNumber": "0",
                          "unitPrice": "N/A",
                          "labelInfo": "N/A",
                          "vesselSize": "Large"
                        }
                            }]
                }

## Update Shipping Information [/shipments/shipmentId?key={token}]

###Update shipping information for an individual customer [POST]

+ Request

                {
                    "id": "45",
                    "shipDate": "2013-07-05",
                    "actualFreightCost": "23.33",
                    "vessels":
                        {
                            "id": "45",
                            "vesselNumber": "1234567",
                            "trackingNumber": "7423542523374",
                            "trackingNumberBack": "7423542523374",
                            "actualWeight": "5.34",
                            "drawers":
                            [{
                                "slotNumber": "2",
                                "drawerNumber": "4893rhjf487rt7484jviuref874"
                            },{
                                "slotNumber": "3",
                                "drawerNumber": "474fhf375t76fh374984564j45gj"
                            }]
                        }
                }

###Update shipping information for an individual customer [GET]

+ Response 200 (application/json)

                       {
                            "code": "200",
                            "timestamp": "1377032713",
                            "data":
                                {
                                    "id": "45"
                                }
                        }

##Get Shipping Details [/getshippingdetails?key={token}]
###Get Shipping Details [GET]

+ Response 200 (application/json)
                {
                    "code": 200,
                    "timestamp": 1402706999
                    "data":
                    {
                          "customer":
                               {
                                "firstName": "Joe",
                                "lastName": "Smith",
                                "email": "joesgvggggmith@yahoo.com",
                                "phone": "8051234567",
                                "customerNumber": "555RTT",
                                "addressFields":
                                        {
                                        "streetAndNumber": "476 E Main Street",
                                        "aptSuite": "200",
                                        "city": "Ventura",
                                        "state": "CA",
                                        "zipcode": "93001"
                                        },"shoppingCart":
                                        [{
                                        "sku": "XFEG8228",
                                        "itemId": "2189",
                                        "qty": "2"
                                        },{
                                        "sku": "FGSXBSNW",
                                        "itemId": "2192",
                                        "qty": "7"
                                        }]
                               }
                    }
                }

## Update shipping information for a codrop [/shipments/shipmentId?key={token}]

### Update shipping information for a codrop [PUT]

+ Response 200
{
        "code": 200,
        "timestamp": 1402706999
        "data":
            {
               "id":"46",
               "shipDate":"2013-07-05",
               "actualFreightCost":"23.33",
               "vessels":
                    {
                          "vesselNumber":"1234567",
                          "trackingNumber":"9923542523374",
                          "trackingNumberBack":"9923542523374",
                          "actualWeight":"225.34",
                      {[
                           {
                              "itemId":"2252",
                              "qty":"2"
                           },{
                              "itemId":"2249",
                              "qty":"2"
                           }]
                        {"drawers":
                        [{
                            "slotNumber":"2",
                            "drawerNumber":"4893rhjf487rt7484jviuref874"
                         },
                         {
                            "slotNumber":"3",
                            "drawerNumber":"474fhf375t76fh374984564j45gj"
                         }]
                    }
            }
}     

#Group Other API Calls

## Get Drawers [/drawers?key={token}]

###All drawers [GET]

+ Request 200 (application/json)


        {
            "code": 200,
            "timestamp": 1402706999
            "data":[{
                  "id":"76",
                  "barcode":"4893rhjf487rt7484jviuref874",
                  "status":"clean",
                  "updateTime":"1377025877"
               },{
                  "id":"77",
                  "barcode":"474fhf375t76fh374984564j45gj",
                  "status":"clean",
                  "updateTime":"1377025878"
               }
            ]}
        }

##Get Vessels [/vessels?key={token}]

###Get Vessels[GET]

+ Request 200 (application/json)

                {
                    "code": "200",
                    "timestamp": "1377026573",
                    "data":
                    [{

                        "id": "29",
                        "vesselTypeId": "2",
                        "vesselNumber": "1234567",
                        "status": "ready",
                        "updateTime": "1377026572"
                    },{
                        "id": "30",
                        "vesselTypeId": "3",
                        "vesselNumber": "7654321",
                        "status":  "in use",
                        "updateTime": "1377026572"
                    }]
                }

##Get Vessel Load [/vesselload?key={token}]

### Get Vessel Load [POST]

+ Parameters
    + Token (required, string)

+ Response  

                {
                   "code":"200",
                   "timestamp":"1377029658",
                   "data":{
                      "size":"Large",
                      "load":"27",
                      "itemsInside":"4",
                      "freeSpace":"11",
                      "shippingWeight":"29.3"
                   }
                }

##Create Picknpack Product Receipt [/pnpproductreceipts?key={token}]
###Create Picknpack Product Receipt [POST]
Note: receipt date is optional. If no receipt date is provided, receipt date will be pre-filled with the date when API request is initiated.

+ Parameters 
    + token (required, string)


+ Request (application/json)

                {
                "itemId" : "2248",
                "receiptDate": "2013-06-01 04:00:00",
                "quantity": "8",
                "location": "A1",
                "picknpackId": "213"
                }

+ Response 200 (application/json)

    + Body

                {
                   "code":"200",
                   "timestamp":"13031633",
                   "data":{
                      "id": "2",
                      "itemId": "2248",
                      "receiptDate": "2013-06-01 04:00:00",
                      "quantity": "8",
                      "location": "A1",
                      "picknpackId": "213",
                      "createTime": "2013-08-20 20:47:13",
                      "updateTime": "2013-08-20 20:47:13"
                   }
                }


